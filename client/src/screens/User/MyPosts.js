import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, SafeAreaView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import COLORS from '../../constant/colors';
import SCREENS from '../index';
import QuestionList from '../../components/QuestionList/QuestionList';
import FloatingActionButton from '../../components/FloatingActionButton/FloatingActionButton';

const MyPosts = ({ navigation }) => {
    const [activeTab, setActiveTab] = useState('myPosts');
    const [refreshing, setRefreshing] = useState(false);

    // Mock data for posts - in real app, this would come from API
    const myPosts = [
        {
            id: 1,
            title: "H·ª£p ƒë·ªìng thu√™ nh√† c√≥ hi·ªáu l·ª±c bao l√¢u?",
            summary: "T√¥i v·ª´a k√Ω h·ª£p ƒë·ªìng thu√™ nh√† v·ªõi ch·ªß nh√†, nh∆∞ng kh√¥ng r√µ th·ªùi h·∫°n hi·ªáu l·ª±c...",
            tags: ["h·ª£p ƒë·ªìng", "thu√™ nh√†", "lu·∫≠t d√¢n s·ª±"],
            voteCount: 5,
            answerCount: 3,
            viewCount: 120,
            hasAcceptedAnswer: true,
            author: { name: "B·∫°n" },
            createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days ago
        },
        {
            id: 2,
            title: "Quy ƒë·ªãnh v·ªÅ ch·∫•m d·ª©t h·ª£p ƒë·ªìng lao ƒë·ªông",
            summary: "C√¥ng ty t√¥i mu·ªën ch·∫•m d·ª©t h·ª£p ƒë·ªìng lao ƒë·ªông v·ªõi t√¥i m√† kh√¥ng c√≥ l√Ω do ch√≠nh ƒë√°ng...",
            tags: ["lao ƒë·ªông", "h·ª£p ƒë·ªìng", "ch·∫•m d·ª©t"],
            voteCount: 8,
            answerCount: 0,
            viewCount: 85,
            hasAcceptedAnswer: false,
            author: { name: "B·∫°n" },
            createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 days ago
        }
    ];

    const bookmarkedPosts = [
        {
            id: 3,
            title: "Th·ªß t·ª•c ly h√¥n ƒë∆°n ph∆∞∆°ng c·∫ßn nh·ªØng g√¨?",
            summary: "T√¥i mu·ªën ly h√¥n ƒë∆°n ph∆∞∆°ng nh∆∞ng ch∆∞a bi·∫øt c·∫ßn chu·∫©n b·ªã nh·ªØng gi·∫•y t·ªù g√¨...",
            tags: ["ly h√¥n", "h√¥n nh√¢n", "th·ªß t·ª•c"],
            voteCount: 12,
            answerCount: 7,
            viewCount: 245,
            hasAcceptedAnswer: true,
            author: { name: "Lu·∫≠t s∆∞ Minh" },
            createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 days ago
        },
        {
            id: 4,
            title: "Quy·ªÅn l·ª£i c·ªßa ng∆∞·ªùi lao ƒë·ªông khi ngh·ªâ vi·ªác",
            summary: "Khi ngh·ªâ vi·ªác, t√¥i c√≥ ƒë∆∞·ª£c h∆∞·ªüng nh·ªØng quy·ªÅn l·ª£i g√¨ t·ª´ c√¥ng ty...",
            tags: ["lao ƒë·ªông", "ngh·ªâ vi·ªác", "quy·ªÅn l·ª£i"],
            voteCount: 6,
            answerCount: 4,
            viewCount: 156,
            hasAcceptedAnswer: false,
            author: { name: "Chuy√™n gia HR" },
            createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // 1 day ago
        }
    ];

    const handleAskQuestion = () => {
        navigation.navigate(SCREENS.ASKQUESTION);
    };

    const handleQuestionPress = (question) => {
        // Navigate to question detail - implement this when you have the detail screen
        console.log('Question pressed:', question.title);
    };

    const handleRefresh = () => {
        setRefreshing(true);
        // Simulate API call
        setTimeout(() => {
            setRefreshing(false);
        }, 1500);
    };

    const getCurrentData = () => {
        return activeTab === 'myPosts' ? myPosts : bookmarkedPosts;
    };

    const getEmptyMessage = () => {
        return activeTab === 'myPosts' 
            ? { icon: 'üìù', title: 'Ch∆∞a c√≥ b√†i vi·∫øt', text: 'H√£y ƒë·∫∑t c√¢u h·ªèi ph√°p l√Ω ƒë·∫ßu ti√™n c·ªßa b·∫°n!' }
            : { icon: 'üîñ', title: 'Ch∆∞a c√≥ bookmark', text: 'Bookmark nh·ªØng b√†i vi·∫øt h·ªØu √≠ch ƒë·ªÉ ƒë·ªçc l·∫°i sau!' };
    };

    return (
        <SafeAreaView style={styles.container}>
            {/* Header */}
            <View style={styles.header}>
                <Text style={styles.title}>B√†i ƒëƒÉng</Text>
            </View>

            {/* Tabs */}
            <View style={styles.tabsContainer}>
                <TouchableOpacity 
                    style={[styles.tab, activeTab === 'myPosts' && styles.activeTab]}
                    onPress={() => setActiveTab('myPosts')}
                >
                    <Ionicons 
                        name="document-text-outline" 
                        size={20} 
                        color={activeTab === 'myPosts' ? COLORS.WHITE : COLORS.GRAY_DARK} 
                    />
                    <Text style={[
                        styles.tabText, 
                        activeTab === 'myPosts' && styles.activeTabText
                    ]}>
                        B√†i vi·∫øt c·ªßa t√¥i
                    </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                    style={[styles.tab, activeTab === 'bookmarked' && styles.activeTab]}
                    onPress={() => setActiveTab('bookmarked')}
                >
                    <Ionicons 
                        name="bookmark-outline" 
                        size={20} 
                        color={activeTab === 'bookmarked' ? COLORS.WHITE : COLORS.GRAY_DARK} 
                    />
                    <Text style={[
                        styles.tabText, 
                        activeTab === 'bookmarked' && styles.activeTabText
                    ]}>
                        ƒê√£ bookmark
                    </Text>
                </TouchableOpacity>
            </View>

            {/* Content */}
            <View style={styles.content}>
                <QuestionList
                    questions={getCurrentData()}
                    onQuestionPress={handleQuestionPress}
                    onRefresh={handleRefresh}
                    refreshing={refreshing}
                    emptyState={getEmptyMessage()}
                />
            </View>

            {/* Floating Action Button */}
            <FloatingActionButton
                onPress={handleAskQuestion}
                icon="add"
                style={styles.fab}
            />
        </SafeAreaView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: COLORS.BG,
    },
    header: {
        backgroundColor: COLORS.WHITE,
        paddingHorizontal: 20,
        paddingVertical: 16,
        borderBottomWidth: 1,
        borderBottomColor: COLORS.GRAY_BG,
    },
    title: {
        fontSize: 24,
        fontWeight: 'bold',
        color: COLORS.BLACK,
        marginBottom: 4,
    },
    subtitle: {
        fontSize: 14,
        color: COLORS.GRAY,
    },
    tabsContainer: {
        flexDirection: 'row',
        backgroundColor: COLORS.WHITE,
        paddingHorizontal: 20,
        paddingVertical: 12,
        borderBottomWidth: 1,
        borderBottomColor: COLORS.GRAY_BG,
    },
    tab: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: 12,
        paddingHorizontal: 16,
        marginHorizontal: 4,
        borderRadius: 8,
        backgroundColor: COLORS.GRAY_BG,
    },
    activeTab: {
        backgroundColor: COLORS.BLUE,
    },
    tabText: {
        fontSize: 14,
        fontWeight: '600',
        color: COLORS.GRAY_DARK,
        marginLeft: 8,
    },
    activeTabText: {
        color: COLORS.WHITE,
    },
    content: {
        flex: 1,
    },
    fab: {
        position: 'absolute',
        bottom: 20,
        right: 20,
    },
});

export default MyPosts;
